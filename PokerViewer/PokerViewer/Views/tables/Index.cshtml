@model PagedList.IPagedList<PokerViewer.Models.table>
@using PagedList.Mvc;

<link href="~/Content/PagedList.css" rel="stylesheet"
	  type="text/css" />

<link href="~/Content/PagedList.css" rel="stylesheet"
	  type="text/css" />

@{
	ViewBag.Title = "Index";
	SelectList itemsPerPageList = DefaultValues.ItemsPerPageList;


}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@using (Html.BeginForm("Index", "tables", FormMethod.Get))
{
	<p>
		Find by Table ID: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
		<input type="submit" value="Search" />
	</p>
}
<table class="table">
    <tr>
        <th>
			@Html.ActionLink("TableID", "Index", new { sortOrder = ViewBag.IdSortParm, currentFilter = ViewBag.CurrentFilter })
            
        </th>
        <th>
			@Html.ActionLink("MaxPlayers", "Index", new { sortOrder = ViewBag.MaxPlayers, currentFilter = ViewBag.CurrentFilter })
           
        </th>
        <th>
			@Html.ActionLink("Stakes", "Index", new { sortOrder = ViewBag.StakesSortParm, currentFilter = ViewBag.CurrentFilter })
        
        </th>
        <th>
			@Html.ActionLink("Site", "Index", new { sortOrder = ViewBag.SiteSortParm, currentFilter = ViewBag.CurrentFilter })
         
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.TableID)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MaxPlayers)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Stakes)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Site)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.TableID }) |
            @Html.ActionLink("Details", "Details", new { id=item.TableID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.TableID })
        </td>
    </tr>
}

</table>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", new { page, itemsPerPage = ViewBag.CurrentItemsPerPage, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))




